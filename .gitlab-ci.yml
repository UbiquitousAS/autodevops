stages:
  - prebuild
  - build
  - deploy

version:
  image: mcr.microsoft.com/dotnet/sdk:5.0-buster-slim
  stage: prebuild
  script: 
    - dotnet tool install -g minver-cli
    - set_version

build:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - use_version
    - docker_build
  stage: build
  dependencies:
    - version

nuget:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:5.0-buster-slim
  script:
    - dotnet pack -c Release -o $PWD/nuget
    - dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
    - dotnet nuget push "$PWD/nuget/*.nupkg" --source gitlab
  only:
    - master
    - tags

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}

  set_version() {
      export PATH="$PATH:/root/.dotnet/tools
      cd ${1-.}
      echo "export APPLICATION_VERSION=\"$(minver)\"" > version.sh
  }

  use_version() {
      [ -f version.sh ] && source ./version.sh
      tag=${APPLICATION_VERSION/+/-}
      export CI_APPLICATION_TAG=${tag:-$CI_APPLICATION_TAG}
  }

  docker_build() {
    if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    fi

    if [ -n "$APPLICATION_VERSION" ]; then
      export CI_APPLICATION_TAG=$APPLICATION_VERSION
    fi

    image_previous="$CI_APPLICATION_REPOSITORY:$CI_COMMIT_BEFORE_SHA"
    image_current="$CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHA"
    image_tagged="$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    image_latest="$CI_APPLICATION_REPOSITORY:latest"

    echo "Attempting to pull a previously built image for use with --cache-from..."
    docker image pull --quiet "$image_previous" || \
      docker image pull --quiet "$image_latest" || \
      echo "No previously cached image found. The docker build will proceed without using a cached image"

    docker build --cache-from "$image_previous" --cache-from "$image_latest" \
      --tag "$image_current" --tag "$image_tagged" --tag "$image_latest" .

    docker push "$image_current"
    docker push "$image_tagged"
    docker push "$image_latest"
  }

before_script:
  - *auto_devops
